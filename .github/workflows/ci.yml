name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CI: true
  NODE_ENV: production
  HUSKY: 0 # Disable husky in CI

# Cancel in-progress workflows for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Job 1: Code quality and linting
  lint:
    name: � Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🎨 Check code formatting
        run: pnpm format:check --filter=!@grab-some-apis/api

      - name: 🔍 Lint code
        run: pnpm lint --filter=!@grab-some-apis/api

  # Job 2: Type checking
  typecheck:
    name: 📝 Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🏗️ Type check
        run: pnpm type-check --filter=!@grab-some-apis/api

  # Job 3: Build applications
  build:
    name: 🏗️ Build
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🏗️ Build applications
        run: pnpm build --filter=!@grab-some-apis/api

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/web/.next/
            apps/web/out/
          retention-days: 1

  # Job 4: Test applications
  test:
    name: 🧪 Test
    runs-on: ubuntu-latest
    needs: [lint, typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🧪 Run tests
        run: pnpm test --filter=!@grab-some-apis/api

  # Job 5: Python quality checks
  python:
    name: 🐍 Python
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for Python files
        id: check-python
        run: |
          if find apps/api -name "*.py" -type f | head -1 | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
            echo "✅ Found Python files in apps/api"
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Python files found in apps/api"
          fi

      - name: 🐍 Setup Python
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        if: steps.check-python.outputs.python_files == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/cache@v4
        with:
          path: apps/api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('apps/api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Python dependencies
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry install --no-interaction --no-ansi

      - name: 🎨 Format check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run black --check .

      - name: 📦 Import check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run isort --check-only .

      - name: 🔍 Lint
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run flake8 .

      - name: 📝 Type check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run mypy app

      - name: 🧪 Test
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run pytest -v

  # Job 6: Security audit
  security:
    name: 🔒 Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🔒 Audit dependencies
        run: pnpm audit --audit-level moderate --filter=!@grab-some-apis/api
