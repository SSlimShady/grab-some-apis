name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  CI: true
  NODE_ENV: production
  HUSKY: 0 # Disable husky in CI

# Cancel in-progress workflows for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ===============================================
  # 🌐 FRONTEND (Next.js Web App)
  # ===============================================

  frontend-lint:
    name: 🎨 Frontend - Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🎨 Check code formatting
        run: npx prettier --check "apps/web/**/*.{ts,tsx,js,jsx,md,json}"

      - name: 🔍 Lint code
        working-directory: apps/web
        run: pnpm lint

  frontend-typecheck:
    name: 📝 Frontend - Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🏗️ Type check
        working-directory: apps/web
        run: |
          pnpm install --frozen-lockfile
          pnpm type-check

  frontend-build:
    name: 🏗️ Frontend - Build
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🏗️ Build application
        working-directory: apps/web
        run: pnpm build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-artifacts
          path: |
            apps/web/.next/
            apps/web/out/
          retention-days: 1

  frontend-test:
    name: 🧪 Frontend - Test
    runs-on: ubuntu-latest
    needs: [frontend-lint, frontend-typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🗂️ Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📦 Install dependencies
        run: |
          pnpm install --frozen-lockfile --ignore-scripts
          pnpm rebuild

      - name: 🧪 Run tests
        working-directory: apps/web
        run: pnpm test

  frontend-security:
    name: 🔒 Frontend - Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.15.0

      - name: 🔒 Audit dependencies
        working-directory: apps/web
        run: pnpm audit --audit-level moderate

  # ===============================================
  # � BACKEND (Python API)
  # ===============================================

  backend-lint:
    name: 🎨 Backend - Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for Python files
        id: check-python
        run: |
          if find apps/api -name "*.py" -type f | head -1 | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
            echo "✅ Found Python files in apps/api"
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Python files found in apps/api"
          fi

      - name: 🐍 Setup Python
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        if: steps.check-python.outputs.python_files == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/cache@v4
        with:
          path: apps/api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('apps/api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Python dependencies
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry install --no-interaction --no-ansi

      - name: 🎨 Format check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run black --check .

      - name: 📦 Import sort check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run isort --check-only .

      - name: 🔍 Lint code
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run flake8 app/ --config=.flake8

  backend-typecheck:
    name: 📝 Backend - Type Check
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for Python files
        id: check-python
        run: |
          if find apps/api -name "*.py" -type f | head -1 | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
            echo "✅ Found Python files in apps/api"
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Python files found in apps/api"
          fi

      - name: 🐍 Setup Python
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        if: steps.check-python.outputs.python_files == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/cache@v4
        with:
          path: apps/api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('apps/api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Python dependencies
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry install --no-interaction --no-ansi

      - name: 📝 Type check
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run mypy app

  backend-test:
    name: 🧪 Backend - Test
    runs-on: ubuntu-latest
    needs: [backend-lint, backend-typecheck]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check for Python files
        id: check-python
        run: |
          if find apps/api -name "*.py" -type f | head -1 | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
            echo "✅ Found Python files in apps/api"
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Python files found in apps/api"
          fi

      - name: 🐍 Setup Python
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        if: steps.check-python.outputs.python_files == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/cache@v4
        with:
          path: apps/api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('apps/api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Python dependencies
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry install --no-interaction --no-ansi

      - name: 🧪 Run tests
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run pytest -v --cov=app --cov-report=xml

      - name: 📊 Upload coverage reports
        if: steps.check-python.outputs.python_files == 'true'
        uses: codecov/codecov-action@v4
        with:
          file: apps/api/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  backend-security:
    name: 🔒 Backend - Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: � Check for Python files
        id: check-python
        run: |
          if find apps/api -name "*.py" -type f | head -1 | grep -q .; then
            echo "python_files=true" >> $GITHUB_OUTPUT
            echo "✅ Found Python files in apps/api"
          else
            echo "python_files=false" >> $GITHUB_OUTPUT
            echo "ℹ️ No Python files found in apps/api"
          fi

      - name: 🐍 Setup Python
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: 📦 Install Poetry
        if: steps.check-python.outputs.python_files == 'true'
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 💾 Cache Poetry dependencies
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/cache@v4
        with:
          path: apps/api/.venv
          key: ${{ runner.os }}-poetry-${{ hashFiles('apps/api/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: 📦 Install Python dependencies
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry install --no-interaction --no-ansi

      - name: 🔒 Security audit
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run pip-audit --ignore-vuln GHSA-wj6h-64fc-37mp

      - name: 🔍 Bandit security scan
        if: steps.check-python.outputs.python_files == 'true'
        working-directory: apps/api
        run: poetry run bandit -r app/ -f json -o bandit-report.json || true

      - name: 📤 Upload security report
        if: steps.check-python.outputs.python_files == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-report
          path: apps/api/bandit-report.json
          retention-days: 7

  # ===============================================
  # 📋 SUMMARY JOB
  # ===============================================

  summary:
    name: � CI Summary
    runs-on: ubuntu-latest
    needs:
      - frontend-lint
      - frontend-typecheck
      - frontend-build
      - frontend-test
      - frontend-security
      - backend-lint
      - backend-typecheck
      - backend-test
      - backend-security
    if: always()
    steps:
      - name: 📋 Summary
        run: |
          echo "## 🚀 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🌐 Frontend (Next.js)" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Format: ${{ needs.frontend-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type Check: ${{ needs.frontend-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.frontend-build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.frontend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.frontend-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Backend (Python API)" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & Format: ${{ needs.backend-lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Type Check: ${{ needs.backend-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Test: ${{ needs.backend-test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security: ${{ needs.backend-security.result }}" >> $GITHUB_STEP_SUMMARY
